// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avisio_ivi.proto

#include "avisio_ivi.pb.h"

#include <algorithm>
#include <cstdint>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace avisio_ivi {
PROTOBUF_CONSTEXPR PrimaryVehicleState::PrimaryVehicleState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_ms_)*/0u
  , /*decltype(_impl_.speed_kmh_)*/0
  , /*decltype(_impl_.engine_rpm_)*/0
  , /*decltype(_impl_.current_gear_)*/0
  , /*decltype(_impl_.gear_mode_)*/0
  , /*decltype(_impl_.fuel_level_millipercent_)*/0u
  , /*decltype(_impl_.engine_temp_c_)*/0
  , /*decltype(_impl_.status_flags_)*/0u
  , /*decltype(_impl_.odometer_km_)*/0u
  , /*decltype(_impl_.trip_distance_m_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrimaryVehicleStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrimaryVehicleStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrimaryVehicleStateDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    PrimaryVehicleState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrimaryVehicleStateDefaultTypeInternal _PrimaryVehicleState_default_instance_;
PROTOBUF_CONSTEXPR SignalLightingStatus::SignalLightingStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_ms_)*/0u
  , /*decltype(_impl_.turn_signals_)*/0u
  , /*decltype(_impl_.exterior_lights_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignalLightingStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalLightingStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalLightingStatusDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    SignalLightingStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalLightingStatusDefaultTypeInternal _SignalLightingStatus_default_instance_;
PROTOBUF_CONSTEXPR SafetyStatus::SafetyStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_ms_)*/0u
  , /*decltype(_impl_.seatbelt_fastened_)*/false
  , /*decltype(_impl_.airbag_ok_)*/false
  , /*decltype(_impl_.traction_control_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SafetyStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SafetyStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SafetyStatusDefaultTypeInternal() {}
  union {  // NOLINT(misc-non-private-member-variables-in-classes)
    SafetyStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SafetyStatusDefaultTypeInternal _SafetyStatus_default_instance_;
}  // namespace avisio_ivi
namespace avisio_ivi {
bool Gear_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Gear_strings[8] = {};

static const char Gear_names[] =
  "GEAR_FIFTH"
  "GEAR_FIRST"
  "GEAR_FOURTH"
  "GEAR_NEUTRAL"
  "GEAR_REVERSE"
  "GEAR_SECOND"
  "GEAR_SIXTH"
  "GEAR_THIRD";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Gear_entries[] = {
  { {Gear_names + 0, 10}, 5 },
  { {Gear_names + 10, 10}, 1 },
  { {Gear_names + 20, 11}, 4 },
  { {Gear_names + 31, 12}, 0 },
  { {Gear_names + 43, 12}, 7 },
  { {Gear_names + 55, 11}, 2 },
  { {Gear_names + 66, 10}, 6 },
  { {Gear_names + 76, 10}, 3 },
};

static const int Gear_entries_by_number[] = {
  3, // 0 -> GEAR_NEUTRAL
  1, // 1 -> GEAR_FIRST
  5, // 2 -> GEAR_SECOND
  7, // 3 -> GEAR_THIRD
  2, // 4 -> GEAR_FOURTH
  0, // 5 -> GEAR_FIFTH
  6, // 6 -> GEAR_SIXTH
  4, // 7 -> GEAR_REVERSE
};

const std::string& Gear_Name(
    Gear value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Gear_entries,
          Gear_entries_by_number,
          8, Gear_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Gear_entries,
      Gear_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Gear_strings[idx].get();
}
bool Gear_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Gear* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Gear_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<Gear>(int_value);
  }
  return success;
}
bool GearMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GearMode_strings[6] = {};

static const char GearMode_names[] =
  "GEAR_MODE_DRIVE"
  "GEAR_MODE_MANUAL"
  "GEAR_MODE_NEUTRAL"
  "GEAR_MODE_PARK"
  "GEAR_MODE_REVERSE"
  "GEAR_MODE_SPORT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GearMode_entries[] = {
  { {GearMode_names + 0, 15}, 3 },
  { {GearMode_names + 15, 16}, 5 },
  { {GearMode_names + 31, 17}, 2 },
  { {GearMode_names + 48, 14}, 0 },
  { {GearMode_names + 62, 17}, 1 },
  { {GearMode_names + 79, 15}, 4 },
};

static const int GearMode_entries_by_number[] = {
  3, // 0 -> GEAR_MODE_PARK
  4, // 1 -> GEAR_MODE_REVERSE
  2, // 2 -> GEAR_MODE_NEUTRAL
  0, // 3 -> GEAR_MODE_DRIVE
  5, // 4 -> GEAR_MODE_SPORT
  1, // 5 -> GEAR_MODE_MANUAL
};

const std::string& GearMode_Name(
    GearMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GearMode_entries,
          GearMode_entries_by_number,
          6, GearMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GearMode_entries,
      GearMode_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GearMode_strings[idx].get();
}
bool GearMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GearMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GearMode_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<GearMode>(int_value);
  }
  return success;
}

// ===================================================================

class PrimaryVehicleState::_Internal {
 public:
};

PrimaryVehicleState::PrimaryVehicleState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:avisio_ivi.PrimaryVehicleState)
}
PrimaryVehicleState::PrimaryVehicleState(const PrimaryVehicleState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PrimaryVehicleState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_ms_){}
    , decltype(_impl_.speed_kmh_){}
    , decltype(_impl_.engine_rpm_){}
    , decltype(_impl_.current_gear_){}
    , decltype(_impl_.gear_mode_){}
    , decltype(_impl_.fuel_level_millipercent_){}
    , decltype(_impl_.engine_temp_c_){}
    , decltype(_impl_.status_flags_){}
    , decltype(_impl_.odometer_km_){}
    , decltype(_impl_.trip_distance_m_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.trip_distance_m_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.trip_distance_m_));
  // @@protoc_insertion_point(copy_constructor:avisio_ivi.PrimaryVehicleState)
}

inline void PrimaryVehicleState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_ms_){0u}
    , decltype(_impl_.speed_kmh_){0}
    , decltype(_impl_.engine_rpm_){0}
    , decltype(_impl_.current_gear_){0}
    , decltype(_impl_.gear_mode_){0}
    , decltype(_impl_.fuel_level_millipercent_){0u}
    , decltype(_impl_.engine_temp_c_){0}
    , decltype(_impl_.status_flags_){0u}
    , decltype(_impl_.odometer_km_){0u}
    , decltype(_impl_.trip_distance_m_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrimaryVehicleState::~PrimaryVehicleState() {
  // @@protoc_insertion_point(destructor:avisio_ivi.PrimaryVehicleState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrimaryVehicleState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PrimaryVehicleState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrimaryVehicleState::Clear() {
// @@protoc_insertion_point(message_clear_start:avisio_ivi.PrimaryVehicleState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.trip_distance_m_) -
      reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.trip_distance_m_));
  _internal_metadata_.Clear<std::string>();
}

const char* PrimaryVehicleState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float speed_kmh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.speed_kmh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // double engine_rpm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _impl_.engine_rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // .avisio_ivi.Gear current_gear = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_current_gear(static_cast<::avisio_ivi::Gear>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .avisio_ivi.GearMode gear_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gear_mode(static_cast<::avisio_ivi::GearMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 fuel_level_millipercent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.fuel_level_millipercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 engine_temp_c = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.engine_temp_c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 status_flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.status_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 odometer_km = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.odometer_km_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 trip_distance_m = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.trip_distance_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PrimaryVehicleState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:avisio_ivi.PrimaryVehicleState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp_ms = 1;
  if (this->_internal_timestamp_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp_ms(), target);
  }

  // float speed_kmh = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_kmh = this->_internal_speed_kmh();
  ::uint32_t raw_speed_kmh;
  memcpy(&raw_speed_kmh, &tmp_speed_kmh, sizeof(tmp_speed_kmh));
  if (raw_speed_kmh != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_speed_kmh(), target);
  }

  // double engine_rpm = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engine_rpm = this->_internal_engine_rpm();
  ::uint64_t raw_engine_rpm;
  memcpy(&raw_engine_rpm, &tmp_engine_rpm, sizeof(tmp_engine_rpm));
  if (raw_engine_rpm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_engine_rpm(), target);
  }

  // .avisio_ivi.Gear current_gear = 4;
  if (this->_internal_current_gear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_current_gear(), target);
  }

  // .avisio_ivi.GearMode gear_mode = 5;
  if (this->_internal_gear_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_gear_mode(), target);
  }

  // uint32 fuel_level_millipercent = 6;
  if (this->_internal_fuel_level_millipercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_fuel_level_millipercent(), target);
  }

  // int32 engine_temp_c = 7;
  if (this->_internal_engine_temp_c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_engine_temp_c(), target);
  }

  // uint32 status_flags = 8;
  if (this->_internal_status_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_status_flags(), target);
  }

  // uint32 odometer_km = 9;
  if (this->_internal_odometer_km() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_odometer_km(), target);
  }

  // uint32 trip_distance_m = 10;
  if (this->_internal_trip_distance_m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_trip_distance_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:avisio_ivi.PrimaryVehicleState)
  return target;
}

size_t PrimaryVehicleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avisio_ivi.PrimaryVehicleState)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 timestamp_ms = 1;
  if (this->_internal_timestamp_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp_ms());
  }

  // float speed_kmh = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_kmh = this->_internal_speed_kmh();
  ::uint32_t raw_speed_kmh;
  memcpy(&raw_speed_kmh, &tmp_speed_kmh, sizeof(tmp_speed_kmh));
  if (raw_speed_kmh != 0) {
    total_size += 1 + 4;
  }

  // double engine_rpm = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engine_rpm = this->_internal_engine_rpm();
  ::uint64_t raw_engine_rpm;
  memcpy(&raw_engine_rpm, &tmp_engine_rpm, sizeof(tmp_engine_rpm));
  if (raw_engine_rpm != 0) {
    total_size += 1 + 8;
  }

  // .avisio_ivi.Gear current_gear = 4;
  if (this->_internal_current_gear() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_current_gear());
  }

  // .avisio_ivi.GearMode gear_mode = 5;
  if (this->_internal_gear_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gear_mode());
  }

  // uint32 fuel_level_millipercent = 6;
  if (this->_internal_fuel_level_millipercent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fuel_level_millipercent());
  }

  // int32 engine_temp_c = 7;
  if (this->_internal_engine_temp_c() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_engine_temp_c());
  }

  // uint32 status_flags = 8;
  if (this->_internal_status_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status_flags());
  }

  // uint32 odometer_km = 9;
  if (this->_internal_odometer_km() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_odometer_km());
  }

  // uint32 trip_distance_m = 10;
  if (this->_internal_trip_distance_m() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trip_distance_m());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrimaryVehicleState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PrimaryVehicleState*>(
      &from));
}

void PrimaryVehicleState::MergeFrom(const PrimaryVehicleState& from) {
  PrimaryVehicleState* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:avisio_ivi.PrimaryVehicleState)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp_ms() != 0) {
    _this->_internal_set_timestamp_ms(from._internal_timestamp_ms());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed_kmh = from._internal_speed_kmh();
  ::uint32_t raw_speed_kmh;
  memcpy(&raw_speed_kmh, &tmp_speed_kmh, sizeof(tmp_speed_kmh));
  if (raw_speed_kmh != 0) {
    _this->_internal_set_speed_kmh(from._internal_speed_kmh());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engine_rpm = from._internal_engine_rpm();
  ::uint64_t raw_engine_rpm;
  memcpy(&raw_engine_rpm, &tmp_engine_rpm, sizeof(tmp_engine_rpm));
  if (raw_engine_rpm != 0) {
    _this->_internal_set_engine_rpm(from._internal_engine_rpm());
  }
  if (from._internal_current_gear() != 0) {
    _this->_internal_set_current_gear(from._internal_current_gear());
  }
  if (from._internal_gear_mode() != 0) {
    _this->_internal_set_gear_mode(from._internal_gear_mode());
  }
  if (from._internal_fuel_level_millipercent() != 0) {
    _this->_internal_set_fuel_level_millipercent(from._internal_fuel_level_millipercent());
  }
  if (from._internal_engine_temp_c() != 0) {
    _this->_internal_set_engine_temp_c(from._internal_engine_temp_c());
  }
  if (from._internal_status_flags() != 0) {
    _this->_internal_set_status_flags(from._internal_status_flags());
  }
  if (from._internal_odometer_km() != 0) {
    _this->_internal_set_odometer_km(from._internal_odometer_km());
  }
  if (from._internal_trip_distance_m() != 0) {
    _this->_internal_set_trip_distance_m(from._internal_trip_distance_m());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PrimaryVehicleState::CopyFrom(const PrimaryVehicleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avisio_ivi.PrimaryVehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimaryVehicleState::IsInitialized() const {
  return true;
}

void PrimaryVehicleState::InternalSwap(PrimaryVehicleState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrimaryVehicleState, _impl_.trip_distance_m_)
      + sizeof(PrimaryVehicleState::_impl_.trip_distance_m_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(PrimaryVehicleState, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string PrimaryVehicleState::GetTypeName() const {
  return "avisio_ivi.PrimaryVehicleState";
}


// ===================================================================

class SignalLightingStatus::_Internal {
 public:
};

SignalLightingStatus::SignalLightingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:avisio_ivi.SignalLightingStatus)
}
SignalLightingStatus::SignalLightingStatus(const SignalLightingStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SignalLightingStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_ms_){}
    , decltype(_impl_.turn_signals_){}
    , decltype(_impl_.exterior_lights_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exterior_lights_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.exterior_lights_));
  // @@protoc_insertion_point(copy_constructor:avisio_ivi.SignalLightingStatus)
}

inline void SignalLightingStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_ms_){0u}
    , decltype(_impl_.turn_signals_){0u}
    , decltype(_impl_.exterior_lights_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SignalLightingStatus::~SignalLightingStatus() {
  // @@protoc_insertion_point(destructor:avisio_ivi.SignalLightingStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalLightingStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SignalLightingStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignalLightingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:avisio_ivi.SignalLightingStatus)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.exterior_lights_) -
      reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.exterior_lights_));
  _internal_metadata_.Clear<std::string>();
}

const char* SignalLightingStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 turn_signals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.turn_signals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 exterior_lights = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.exterior_lights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SignalLightingStatus::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:avisio_ivi.SignalLightingStatus)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp_ms = 1;
  if (this->_internal_timestamp_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp_ms(), target);
  }

  // uint32 turn_signals = 2;
  if (this->_internal_turn_signals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_turn_signals(), target);
  }

  // uint32 exterior_lights = 3;
  if (this->_internal_exterior_lights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_exterior_lights(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:avisio_ivi.SignalLightingStatus)
  return target;
}

size_t SignalLightingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avisio_ivi.SignalLightingStatus)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 timestamp_ms = 1;
  if (this->_internal_timestamp_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp_ms());
  }

  // uint32 turn_signals = 2;
  if (this->_internal_turn_signals() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_turn_signals());
  }

  // uint32 exterior_lights = 3;
  if (this->_internal_exterior_lights() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_exterior_lights());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalLightingStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SignalLightingStatus*>(
      &from));
}

void SignalLightingStatus::MergeFrom(const SignalLightingStatus& from) {
  SignalLightingStatus* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:avisio_ivi.SignalLightingStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp_ms() != 0) {
    _this->_internal_set_timestamp_ms(from._internal_timestamp_ms());
  }
  if (from._internal_turn_signals() != 0) {
    _this->_internal_set_turn_signals(from._internal_turn_signals());
  }
  if (from._internal_exterior_lights() != 0) {
    _this->_internal_set_exterior_lights(from._internal_exterior_lights());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SignalLightingStatus::CopyFrom(const SignalLightingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avisio_ivi.SignalLightingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalLightingStatus::IsInitialized() const {
  return true;
}

void SignalLightingStatus::InternalSwap(SignalLightingStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalLightingStatus, _impl_.exterior_lights_)
      + sizeof(SignalLightingStatus::_impl_.exterior_lights_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(SignalLightingStatus, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string SignalLightingStatus::GetTypeName() const {
  return "avisio_ivi.SignalLightingStatus";
}


// ===================================================================

class SafetyStatus::_Internal {
 public:
};

SafetyStatus::SafetyStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:avisio_ivi.SafetyStatus)
}
SafetyStatus::SafetyStatus(const SafetyStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SafetyStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_ms_){}
    , decltype(_impl_.seatbelt_fastened_){}
    , decltype(_impl_.airbag_ok_){}
    , decltype(_impl_.traction_control_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.traction_control_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.traction_control_));
  // @@protoc_insertion_point(copy_constructor:avisio_ivi.SafetyStatus)
}

inline void SafetyStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_ms_){0u}
    , decltype(_impl_.seatbelt_fastened_){false}
    , decltype(_impl_.airbag_ok_){false}
    , decltype(_impl_.traction_control_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SafetyStatus::~SafetyStatus() {
  // @@protoc_insertion_point(destructor:avisio_ivi.SafetyStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SafetyStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SafetyStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SafetyStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:avisio_ivi.SafetyStatus)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.traction_control_) -
      reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.traction_control_));
  _internal_metadata_.Clear<std::string>();
}

const char* SafetyStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool seatbelt_fastened = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.seatbelt_fastened_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool airbag_ok = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.airbag_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool traction_control = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.traction_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SafetyStatus::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:avisio_ivi.SafetyStatus)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp_ms = 1;
  if (this->_internal_timestamp_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp_ms(), target);
  }

  // bool seatbelt_fastened = 2;
  if (this->_internal_seatbelt_fastened() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_seatbelt_fastened(), target);
  }

  // bool airbag_ok = 3;
  if (this->_internal_airbag_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_airbag_ok(), target);
  }

  // bool traction_control = 5;
  if (this->_internal_traction_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_traction_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:avisio_ivi.SafetyStatus)
  return target;
}

size_t SafetyStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avisio_ivi.SafetyStatus)
  size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 timestamp_ms = 1;
  if (this->_internal_timestamp_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp_ms());
  }

  // bool seatbelt_fastened = 2;
  if (this->_internal_seatbelt_fastened() != 0) {
    total_size += 1 + 1;
  }

  // bool airbag_ok = 3;
  if (this->_internal_airbag_ok() != 0) {
    total_size += 1 + 1;
  }

  // bool traction_control = 5;
  if (this->_internal_traction_control() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SafetyStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SafetyStatus*>(
      &from));
}

void SafetyStatus::MergeFrom(const SafetyStatus& from) {
  SafetyStatus* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:avisio_ivi.SafetyStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp_ms() != 0) {
    _this->_internal_set_timestamp_ms(from._internal_timestamp_ms());
  }
  if (from._internal_seatbelt_fastened() != 0) {
    _this->_internal_set_seatbelt_fastened(from._internal_seatbelt_fastened());
  }
  if (from._internal_airbag_ok() != 0) {
    _this->_internal_set_airbag_ok(from._internal_airbag_ok());
  }
  if (from._internal_traction_control() != 0) {
    _this->_internal_set_traction_control(from._internal_traction_control());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SafetyStatus::CopyFrom(const SafetyStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avisio_ivi.SafetyStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafetyStatus::IsInitialized() const {
  return true;
}

void SafetyStatus::InternalSwap(SafetyStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SafetyStatus, _impl_.traction_control_)
      + sizeof(SafetyStatus::_impl_.traction_control_)  // NOLINT
      - PROTOBUF_FIELD_OFFSET(SafetyStatus, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

std::string SafetyStatus::GetTypeName() const {
  return "avisio_ivi.SafetyStatus";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace avisio_ivi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::avisio_ivi::PrimaryVehicleState*
Arena::CreateMaybeMessage< ::avisio_ivi::PrimaryVehicleState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::avisio_ivi::PrimaryVehicleState >(arena);
}
template<> PROTOBUF_NOINLINE ::avisio_ivi::SignalLightingStatus*
Arena::CreateMaybeMessage< ::avisio_ivi::SignalLightingStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::avisio_ivi::SignalLightingStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::avisio_ivi::SafetyStatus*
Arena::CreateMaybeMessage< ::avisio_ivi::SafetyStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::avisio_ivi::SafetyStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
